// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain_apcShaderVertWT

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
//RWTexture2D<float4> Result;

#define ThreadGroupSize_X 4
#define ThreadGroupSize_Y 4

struct InputVertexStruct
{
	float3 _posL;
	float _riggingWeight;
	float3 _posRigging;
	
	float4x4 _mtx_Cal_VertLocal;
	float4x4 _mtx_Cal_VertWorld;
	float4x4 _mtx_World;
};



struct OutVertexStruct
{
	float3 _posWorld3;
	float2 _posWorld2;
	float3 _posLocalOnMesh;
	float4x4 _mtxWorld;
};

float4x4 _mtx_Static_Vert2Mesh;
float4x4 _mtx_MeshTransform;
float4x4 _mtx_MeshTransformInverse;
RWStructuredBuffer<InputVertexStruct> _inputBuffer;
RWStructuredBuffer<OutVertexStruct> _outputBuffer;




[numthreads(ThreadGroupSize_X,ThreadGroupSize_Y,1)]
void CSMain_apcShaderVertWT (uint3 id : SV_DispatchThreadID)
{
	// TODO: insert actual code here!

	//Result[id.xy] = float4(id.x & id.y, (id.x & 15)/15.0, (id.y & 15)/15.0, 0.0);
	int idx = id.x + id.y * ThreadGroupSize_X * 32;
	float spacing = 1.0;

	//float4x4 mtxWorld = _inputBuffer[idx]._mtx_Cal_VertWorld * _mtx_MeshTransform * _inputBuffer[idx]._mtx_Cal_VertLocal * _mtx_Static_Vert2Mesh;
	float4x4 mtxWorld = mul(_inputBuffer[idx]._mtx_Cal_VertWorld, mul(_mtx_MeshTransform, mul(_inputBuffer[idx]._mtx_Cal_VertLocal, _mtx_Static_Vert2Mesh)));
	//float4x4 mtxWorld = _inputBuffer[idx]._mtx_World;

	float3 posL = (_inputBuffer[idx]._posL * (1.0f - _inputBuffer[idx]._riggingWeight)) + (_inputBuffer[idx]._posRigging * _inputBuffer[idx]._riggingWeight);
	
	//float4 posWorld4 = mul(_inputBuffer[idx]._mtx_Cal_VertWorld, mul(_mtx_MeshTransform, mul(_inputBuffer[idx]._mtx_Cal_VertLocal, mul(_mtx_Static_Vert2Mesh, float4(posL.xyz, 0)))));
	float4 posWorld4 = mul(mtxWorld, float4(posL.xyz, 1) );

	float3 posWorld3 = posWorld4.xyz;
	
	//float3 posWorld3 = mul(mtxWorld, float4(posL.xyz, 1)).xyz;
	
	
	_outputBuffer[idx]._posWorld3 = posWorld3;
	_outputBuffer[idx]._posWorld2 = posWorld3.xy;
	_outputBuffer[idx]._posLocalOnMesh = mul(_mtx_MeshTransformInverse, float4(posWorld3.xyz, 1)).xyz;
	_outputBuffer[idx]._posLocalOnMesh.z = 0;

	_outputBuffer[idx]._mtxWorld = mtxWorld;

	//_outputBuffer[idx]._posWorld3 = float3(100, 100, 100);
}
